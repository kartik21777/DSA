use pairs if you want to store two variables in a variable
pait<int,int> p = {1,3} -  stores 1 and 3 in p,can use any data type
p.first/p.second- gives 1st and 2nd element of the pair
pair<int,pair<int,int>> p = {1,{2,3}}-nested property of pairs. If p.fist- 1, p.second.first- 2, p.second.second-3
pair<int,int> arr[]- [{1,2},{4,5},{6,7}], then arr[2].first-6
vector <int> v- for initialising a vector
vector<int> v(n)/vector<int> v(n,1)- for making a vector of size n/for making a vector of size n filled with 1
v.capacity()- tells us the size of the vector
v.size()- tells us the number of elements in the vector
v.push_back(i)- pushes number i from the back of the array
v.pop_back() - removes the element from the back/removes the last element
v.front()/v.back()- tells us the first element/tells us the last 
v.clear()- empties the entire vector,size becomes 0 but capacity remains same
vector<int> k(v)- for copying vector v into vector k, if vector k already initialise then k = v for copying will also work
vector<pair<int,int>> v, for declaring pair vector
emplace_back()- same as push back but faster and in push_back if you want to enter a pair you write {1,2} but in emplace back (1,3) is automatically considered as pair
v[0]/v.at(0)- same
vector<int>::iterator it = v.begin() - for storing the address of the first cell of v in it
++it
cout<<*(it)- for printing the variable stored in it address
vector<int>::iterator it = v.end() - for storing the address of the memory address just after the last cell of v, so --it will be memory address of the last cell
for(vector<int>::iterator it = v.begin();it != v.end(); ++it)
cout<<*(it)- for printing vector
for(auto it = v.begin(); it != v.end(); ++it) - same as above. auto initialises the variable according to data type.
Can also use for each loop for printing.
v.erase(memory address) -  will delete the memory address from the vector reducing the size and capacity by 1
v.erase(n1,n2)- will erase memory addresses between n1 and n2 including n1
v.insert(memory address/v.begin(),number/1) - lets say there is a vector {300,300} then after this it will be {1,300,300}
v.insert(memory address/v.begin()+1,number of numbers/3,number/6) - {300,6,6,6,300}
vector<int>k(2,50)
v.insert(v.begin(),k.begin(),k.end())- v vector becomes {50,50,300,6,6,6,300}
v1-{10,20} and v2-{50,60}, then v1.swap(v2) - then v1 becomes -{50,60} and v2 becomes -{10,20}
v.empty()- if v has even one element then false else true
