sing namespace std
we get input by cin and output by cout
getline(cin,string variable)
int arr [10]
cin>>arr[0]>>arr[1]>>arr[2]
arr[3] = 5
int arr[3][5] which means 3 rows and 5 columns
int len = s.size()
s[2] = 'and'
endl or \n for next line
4 types of function -   void
                        return- int sum = sum(num1,num2)
                        paramaterised
                        non paramaterised
pass by value means you send copy and not the actual value
pass by reference means you send the location, can do it by sum(int &a), you always send array by pass by reference
Time complexity != time taken, rather rate at which the time taken increases with respect to the input size
Represented by big oh, O()
For calculating time complexity - Calculate in terms of worst case scenario, avoid constants, avoid lower values
Three cases - worst case, average case, best case
(int)log10(n) +1 - this will give you the digits of a number
If number of times the loop running depends on the number getting divided till it becomes 0 then time complexity will be O(log n), base will be the number dividing. ex- if n/5 so O(log 5 (n)). so time complexity for counting the digits of a number using dividing method will be O(log 10 n)
for finding divisors of a number of a number n, sqrt(n) will give us the number above which the number starts repeating itself.
Space Complexity - Input Space + Auxillary Space
Auxillary Space- Space that you take to solve the problem. Input Space- Space that you take to store the problem.
1s ~ 10^8 Operations, 2s ~ 2*10^8
When a function calls itself un til a specific condition is met
Infiinite recursions end up causing stack overflow
In parametarised (2 or more variables) functions return statement is in only in 'if block' but in functions (1 variable) return is in both if block and else block for recursion questions.
if array local then max length is 10^6 but if global variable array then length is 10^7
Operating Systems, Networking, IP stack, Storage, Databases, prpgramming Lang, Debugging, git, automation tools, scripting language, basics of cloud, qwicklabs,certificates. 



use pairs if you want to store two variables in a variable
pait<int,int> p = {1,3} -  stores 1 and 3 in p,can use any data type
p.first/p.second- gives 1st and 2nd element of the pair
pair<int,pair<int,int>> p = {1,{2,3}}-nested property of pairs. If p.fist- 1, p.second.first- 2, p.second.second-3
pair<int,int> arr[]- [{1,2},{4,5},{6,7}], then arr[2].first-6
vector <int> v- for initialising a vector
vector<int> v(n)/vector<int> v(n,1)- for making a vector of size n/for making a vector of size n filled with 1
v.capacity()- tells us the size of the vector
v.size()- tells us the number of elements in the vector
v.push_back(i)- pushes number i from the back of the array
v.pop_back() - removes the element from the back/removes the last element
v.front()/v.back()- tells us the first element/tells us the last 
v.clear()- empties the entire vector,size becomes 0 but capacity remains same
vector<int> k(v)- for copying vector v into vector k, if vector k already initialise then k = v for copying will also work
vector<pair<int,int>> v, for declaring pair vector
emplace_back()- same as push back but faster and in push_back if you want to enter a pair you write {1,2} but in emplace back (1,3) is automatically considered as pair
v[0]/v.at(0)- same
vector<int>::iterator it = v.begin() - for storing the address of the first cell of v in it
++it
cout<<*(it)- for printing the variable stored in it address
vector<int>::iterator it = v.end() - for storing the address of the memory address just after the last cell of v, so --it will be memory address of the last cell
for(vector<int>::iterator it = v.begin();it != v.end(); ++it)
cout<<*(it)- for printing vector
for(auto it = v.begin(); it != v.end(); ++it) - same as above. auto initialises the variable according to data type.
Can also use for each loop for printing.
v.erase(memory address) -  will delete the memory address from the vector reducing the size and capacity by 1
v.erase(n1,n2)- will erase memory addresses between n1 and n2 including n1
v.insert(memory address/v.begin(),number/1) - lets say there is a vector {300,300} then after this it will be {1,300,300}
v.insert(memory address/v.begin()+1,number of numbers/3,number/6) - {300,6,6,6,300}
vector<int>k(2,50)
v.insert(v.begin(),k.begin(),k.end())- v vector becomes {50,50,300,6,6,6,300}
v1-{10,20} and v2-{50,60}, then v1.swap(v2) - then v1 becomes -{50,60} and v2 becomes -{10,20}
v.empty()- if v has even one element then false else true
list is a dynamic container, same as vector but also gives front Operations
list<int> ls- for initialising
ls.push_front(5) - {5}
ls.emplace_front(2)- {2,5}
rest functions same as vectors
deque<int>deque
rest functions same as list and vector including front Operations
Stack is last in first out (LIFO)
stack<int>st - initialises a stack
st.push(1) - {1}
st.pushes(2) - {2,1}
st.pushes(3) - {3,2,1}
st.top()- prints 3
st.pop()- {2,1}
stack<int>st1,st2
st1.swap(st2)
all functions T.C is O(n)
Queue is FIFO(first in first out)
queue<int>q - initialises a stack
q.push(1) - {1}
q.pushes(2) - {1,2}
q.pushes(3) - {1,2,3}
q.back()- prints 3
q.front() - prints 1
q.pop()- {2,3}
all functions similar to stack
in priority queue the one with the largest value or smallest stays at the top
priority_queue<int>pq- max priority queue/max heap
priority_queue<int,vector<int>,greater<int>>pq- for min priority queue/min heap
for priority queue- push and pop- O(log n) and top- O(n)
Set-Stores everything in a sorted manner and every number is unique
set<int>st- for initialising set
set.insert(1)-{1}
set.emplace(2)-{1,2}
set.insert(1)-{1,2}- every number has to be unique
set.insert(3)-{1,2,3}
set.insert(4)-{1,2,3,4}
Funtionality of insert can be used in vectors, that increases the efficiency
begin(),rbegin(),rend(),swap(),empty(),end(),size()- are same as before
{1,2,3,4}
auto it = set.find(3)- returns an iterator pointing towards the number 3 in set
auto it = set.find(5)- returns an iterator pointing towards st.end() as no 5 in set
st.count(n)- if n exists in set then it returns 1 as every element is unique, if it doesn't then it returns 0
erase functions works same as vector, give this function number or the iterator
everything in set is in O(log n)
multiset<int>ms - stores everything in sorted order but the numbers are not unique
{1,1,1}
if you want to delete only the 1st end give erase() iterator poinitng towards 1
everything same as set